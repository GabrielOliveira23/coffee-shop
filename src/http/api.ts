/**
 * Generated by orval v7.7.0 🍺
 * Do not edit manually.
 * Coffee Shop
 * OpenAPI spec version: 0.0.1
 */
import type { AxiosRequestConfig, AxiosResponse } from 'axios'
import axios from 'axios'

export type CreateProductBody = {
  name: string
  /** @minLength 4 */
  description: string
  /** @minimum 0 */
  price: number
  tags: string[]
}

export type CreateProduct201Product = {
  id: string
  name: string
  description: string
  price: number
  tags: string[]
}

export type CreateProduct201 = {
  product: CreateProduct201Product
}

export type CreateProduct400 = {
  message: string
}

export type GetAllProducts200ProductsItem = {
  id: string
  name: string
  description: string
  price: number
  tags: string[]
  /** @nullable */
  image: string | null
}

export type GetAllProducts200 = {
  products: GetAllProducts200ProductsItem[]
}

export type GetProductById200Product = {
  id: string
  name: string
  description: string
  price: number
  tags: string[]
}

export type GetProductById200 = {
  product: GetProductById200Product
}

export type GetProductById400 = {
  message: string
}

/**
 * @nullable
 */
export type AddProductImage200ProductImage = unknown | null

export type AddProductImage200Product = {
  id: string
  name: string
  description: string
  price: number
  tags: string[]
  /** @nullable */
  image: AddProductImage200ProductImage
}

export type AddProductImage200 = {
  product: AddProductImage200Product
}

export type AddProductImage400 = {
  message: string
}

export type CreateOrderBodyProductsItem = {
  productId: string
  quantity: number
}

export type CreateOrderBodyPaymentBy =
  (typeof CreateOrderBodyPaymentBy)[keyof typeof CreateOrderBodyPaymentBy]

export const CreateOrderBodyPaymentBy = {
  CREDIT_CARD: 'CREDIT_CARD',
  DEBIT_CARD: 'DEBIT_CARD',
  MONEY: 'MONEY',
} as const

export type CreateOrderBodyAddress = {
  /** @pattern ^\d{5}-\d{3}$ */
  cep: string
  /** @minLength 3 */
  street: string
  /** @minimum 0 */
  number: number
  /** @minLength 3 */
  neighborhood: string
  /** @minLength 3 */
  city: string
  /** @pattern ^[A-Z]{2}$|^[a-z]{2}$ */
  uf: string
  /** @nullable */
  complement?: string | null
}

export type CreateOrderBody = {
  products: CreateOrderBodyProductsItem[]
  /** @minimum 0 */
  value: number
  paymentBy: CreateOrderBodyPaymentBy
  address: CreateOrderBodyAddress
}

export type CreateOrder201CreatedOrderProductsItem = {
  productId: string
  name: string
  price: number
  quantity: number
}

export type CreateOrder201CreatedOrderPaymentBy =
  (typeof CreateOrder201CreatedOrderPaymentBy)[keyof typeof CreateOrder201CreatedOrderPaymentBy]

export const CreateOrder201CreatedOrderPaymentBy = {
  CREDIT_CARD: 'CREDIT_CARD',
  DEBIT_CARD: 'DEBIT_CARD',
  MONEY: 'MONEY',
} as const

export type CreateOrder201CreatedOrderAddress = {
  /** @pattern ^\d{5}-\d{3}$ */
  cep: string
  street: string
  number: number
  neighborhood: string
  city: string
  /** @pattern ^[A-Z]{2}$ */
  uf: string
  /** @nullable */
  complement?: string | null
}

export type CreateOrder201CreatedOrder = {
  id: string
  products: CreateOrder201CreatedOrderProductsItem[]
  value: number
  paymentBy: CreateOrder201CreatedOrderPaymentBy
  address: CreateOrder201CreatedOrderAddress
}

export type CreateOrder201 = {
  createdOrder: CreateOrder201CreatedOrder
}

export type GetAllOrders200OrdersItemProductsItem = {
  productId: string
  name: string
  price: number
  quantity: number
}

export type GetAllOrders200OrdersItemPaymentBy =
  (typeof GetAllOrders200OrdersItemPaymentBy)[keyof typeof GetAllOrders200OrdersItemPaymentBy]

export const GetAllOrders200OrdersItemPaymentBy = {
  CREDIT_CARD: 'CREDIT_CARD',
  DEBIT_CARD: 'DEBIT_CARD',
  MONEY: 'MONEY',
} as const

export type GetAllOrders200OrdersItemAddress = {
  /** @pattern ^\d{5}-\d{3}$ */
  cep: string
  street: string
  number: number
  neighborhood: string
  city: string
  /** @pattern ^[A-Z]{2}$ */
  uf: string
  /** @nullable */
  complement?: string | null
}

export type GetAllOrders200OrdersItem = {
  id: string
  products: GetAllOrders200OrdersItemProductsItem[]
  value: number
  paymentBy: GetAllOrders200OrdersItemPaymentBy
  address: GetAllOrders200OrdersItemAddress
}

export type GetAllOrders200 = {
  orders: GetAllOrders200OrdersItem[]
}

export type GetOrderById200OrderProductsItem = {
  productId: string
  name: string
  price: number
  quantity: number
}

export type GetOrderById200OrderPaymentBy =
  (typeof GetOrderById200OrderPaymentBy)[keyof typeof GetOrderById200OrderPaymentBy]

export const GetOrderById200OrderPaymentBy = {
  CREDIT_CARD: 'CREDIT_CARD',
  DEBIT_CARD: 'DEBIT_CARD',
  MONEY: 'MONEY',
} as const

export type GetOrderById200OrderAddress = {
  /** @pattern ^\d{5}-\d{3}$ */
  cep: string
  street: string
  number: number
  neighborhood: string
  city: string
  /** @pattern ^[A-Z]{2}$ */
  uf: string
  /** @nullable */
  complement?: string | null
}

export type GetOrderById200Order = {
  id: string
  products: GetOrderById200OrderProductsItem[]
  value: number
  paymentBy: GetOrderById200OrderPaymentBy
  address: GetOrderById200OrderAddress
}

export type GetOrderById200 = {
  order: GetOrderById200Order
}

export type GetOrderById400 = {
  message: string
}

export const coffeeShopApi = () => {
  /**
   * Description very cool
   * @summary Create a new product
   */
  const createProduct = <TData = AxiosResponse<CreateProduct201>>(
    createProductBody: CreateProductBody,
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.post(
      'http://localhost:4000/products',
      createProductBody,
      options
    )
  }

  /**
   * Description very cool
   * @summary Get all registered products
   */
  const getAllProducts = <TData = AxiosResponse<GetAllProducts200>>(
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.get('http://localhost:4000/products', options)
  }

  /**
   * Description very cool
   * @summary Find a product by Id
   */
  const getProductById = <TData = AxiosResponse<GetProductById200>>(
    productId: string,
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.get(`http://localhost:4000/products/${productId}`, options)
  }

  /**
   * Description very cool
   * @summary Add an image to a product
   */
  const addProductImage = <TData = AxiosResponse<AddProductImage200>>(
    productId: string,
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.patch(
      `http://localhost:4000/products/${productId}/image`,
      undefined,
      options
    )
  }

  /**
   * Description very cool
   * @summary Create a new order
   */
  const createOrder = <TData = AxiosResponse<CreateOrder201>>(
    createOrderBody: CreateOrderBody,
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.post('http://localhost:4000/orders', createOrderBody, options)
  }

  /**
   * Description very cool
   * @summary Find all registered orders
   */
  const getAllOrders = <TData = AxiosResponse<GetAllOrders200>>(
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.get('http://localhost:4000/orders', options)
  }

  /**
   * Description very cool
   * @summary Find an order by Id
   */
  const getOrderById = <TData = AxiosResponse<GetOrderById200>>(
    orderId: string,
    options?: AxiosRequestConfig
  ): Promise<TData> => {
    return axios.get(`http://localhost:4000/orders/${orderId}`, options)
  }

  return {
    createProduct,
    getAllProducts,
    getProductById,
    addProductImage,
    createOrder,
    getAllOrders,
    getOrderById,
  }
}
export type CreateProductResult = AxiosResponse<CreateProduct201>
export type GetAllProductsResult = AxiosResponse<GetAllProducts200>
export type GetProductByIdResult = AxiosResponse<GetProductById200>
export type AddProductImageResult = AxiosResponse<AddProductImage200>
export type CreateOrderResult = AxiosResponse<CreateOrder201>
export type GetAllOrdersResult = AxiosResponse<GetAllOrders200>
export type GetOrderByIdResult = AxiosResponse<GetOrderById200>
